{"kind":"Notebook","sha256":"95608085e3f216e9e1ecb4e33d7e123c8705e98c42a3791a02a4277e55db09ff","slug":"challenge-description","location":"/challenge_description.ipynb","dependencies":[],"frontmatter":{"title":"Your mission","authors":[{"id":"Willie Aboumrad","name":"Willie Aboumrad"}],"kernelspec":{"name":"python3","language":"python","display_name":"Python 3 (ipykernel)"},"github":"https://github.com/willieab/ionq-skku-vision-challenge","subject":"Quantum Vision Challenge","venue":{"title":"IonQ-SKKU Hackathon"},"copyright":"IonQ, Inc (2024)","thumbnail":"/qml-challenge-scorer/build/hybrid_nn-93408153469c15947455c8d05e9da95c.png","exports":[{"format":"ipynb","filename":"challenge_description.ipynb","url":"/qml-challenge-scorer/build/challenge_descriptio-8d5b503a19fa80669243f7750026c732.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this challenge you‚Äôll implement a hybrid quantum-classical image classification pipeline using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PEzpwmY1Fv"},{"type":"inlineCode","value":"ionqvision","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AZhYwwVLNf"},{"type":"text","value":", IonQ‚Äôs next-generation platform for QML computations, and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"P7AGvnHryZ"},{"type":"link","url":"https://pytorch.org","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"inlineCode","value":"PyTorch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EX3eNntksn"}],"urlSource":"https://pytorch.org","key":"MLerEbxNva"},{"type":"text","value":". In particular, you‚Äôll train a quantum-classical neural network to distinguish between two types of different handwritten digits in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SdzYXgwAR1"},{"type":"link","url":"https://en.wikipedia.org/wiki/MNIST_database","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"MNIST database","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SpxFMs01f0"}],"urlSource":"wiki:MNIST_database","data":{"page":"MNIST_database","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"q94Tcic7zS"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n0sU4JWfGt"}],"key":"rYIPl6WUNQ"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NAuURLsWV3"}],"key":"H1mcxAyQl9"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"If you haven‚Äôt used ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"IZPj4SgDE2"},{"type":"inlineCode","value":"PyTorch","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OnEhs4aIfU"},{"type":"text","value":" yet, don‚Äôt sweat it!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YXud4Eb2Xu"}],"key":"P7ZebBF5JH"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This challenge is about the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jRyHzeDeJ3"},{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"quantum","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"OP2IakvYbe"}],"key":"ePhHkwv1q7"},{"type":"text","value":" in ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"C26S2GpPEe"},{"type":"link","url":"https://en.wikipedia.org/wiki/Quantum_machine_learning","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"‚ÄúQuantum Machine Learning‚Äù","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"G7ChfRV4E2"}],"urlSource":"wiki:Quantum_machine_learning","data":{"page":"Quantum_machine_learning","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"AvrUKkAMSU"},{"type":"text","value":". The accompanying ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"YN5juvXAP5"},{"type":"crossReference","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"starter code","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"KwO8e8QviK"}],"identifier":"sec-training","label":"sec-training","kind":"heading","template":"{name}","resolved":true,"html_id":"sec-training","key":"BV4oYfw9bq"},{"type":"text","value":" will set up everything you need, so you can focus on building your best quantum circuits!","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"OsPxNRDerZ"}],"key":"zRlOYhyLVF"}],"key":"FyuFuhSdaU"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"The figure below illustrates our hybrid pipeline. The operations inside the gray box make up the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"djcIvsgmC6"},{"type":"emphasis","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"quantum layer","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"QReYTbz5v8"}],"key":"rZiOmMhYr7"},{"type":"text","value":". That‚Äôs where the magic happens.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"siqkjxF0ew"}],"key":"Qp8HRgJbBU"},{"type":"container","kind":"figure","identifier":"fig-hybrid-nn","label":"fig-hybrid-nn","children":[{"type":"image","url":"/qml-challenge-scorer/build/hybrid_nn-93408153469c15947455c8d05e9da95c.png","alt":"A diagrammatic representation of our hybrid quantum-classical image classification pipeline","data":{"altTextIsAutoGenerated":true},"key":"tFXUSHrVE3","urlSource":"media/hybrid_nn.png"},{"type":"caption","children":[{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"captionNumber","kind":"figure","label":"fig-hybrid-nn","identifier":"fig-hybrid-nn","html_id":"fig-hybrid-nn","enumerator":"1","children":[{"type":"text","value":"Figure¬†","key":"SxXaTVr1rd"},{"type":"text","value":"1","key":"o0hadXDj9g"},{"type":"text","value":":","key":"nxn9eCKFlM"}],"template":"Figure¬†%s:","key":"XvSc4O1hyE"},{"type":"text","value":"A diagrammatic representation of our hybrid quantum-classical image classification pipeline","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ehKZB5q6kU"}],"key":"ZaovKuPFy8"}],"key":"IwFeIfOrZC"}],"enumerator":"1","html_id":"fig-hybrid-nn","key":"UJ64mnvGbm"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Your mission, should you choose to accept it, is to design the quantum layer that yields the ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"mHViA4mAHE"},{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"highest possible classification accuracy","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"FMG6vN6wuV"}],"key":"eskhKKS7lg"},{"type":"text","value":" (scored automatically on an unseen validation set). Simple, right?","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"MZn7yY2aKe"}],"key":"pyas6gH0qf"},{"type":"heading","depth":2,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Classical, quantum, and then classical again","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Dv8Lo77IfX"}],"identifier":"classical-quantum-and-then-classical-again","label":"Classical, quantum, and then classical again","html_id":"classical-quantum-and-then-classical-again","implicit":true,"key":"k4MsI5YxLR"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"If you‚Äôve made it thus far, congratulations! üéâ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"TcWz9WGLGC"}],"key":"z8yfpqqoZW"},{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"You‚Äôre about to embark on an exciting journey of quantum discovery. To begin, we‚Äôll take a closer look at the architecture of our hybrid neural network. It‚Äôs important to keep in mind that going through our full ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"Y33QikSgrk"},{"type":"emphasis","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"hybrid","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"dwJCvf4Yht"}],"key":"NAQT5zchr7"},{"type":"text","value":" pipeline requires ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"tf42gEXltR"},{"type":"strong","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"both","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"R9e0ko1dUY"}],"key":"JmCosvLzAY"},{"type":"text","value":" classical and quantum hardware, and software that facilitates communication between the two. The ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"A4AtCK1PCx"},{"type":"inlineCode","value":"ionqvision","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"dG1ZPGvHtO"},{"type":"text","value":" abstracts much of this complexity away and it let‚Äôs you focus on the quantum design.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"CeNy6mG57S"}],"key":"UrSwuxw2RN"},{"type":"paragraph","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"In what follows, we‚Äôll explain the classical and quantum parts of our pipeline in some detail. Then we‚Äôll turn to the ","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"Qmei2MFNZs"},{"type":"crossReference","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"starter code","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"PYv3vYi7mK"}],"identifier":"sec-training","label":"sec-training","kind":"heading","template":"{name}","resolved":true,"html_id":"sec-training","key":"M3bucdb6Mt"},{"type":"text","value":", which will get you up and running in no time!","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"uqzJyPNSDF"}],"key":"TFhphL73zs"},{"type":"heading","depth":3,"position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Classical pre-processing","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"yAF0NTLuBS"}],"identifier":"classical-pre-processing","label":"Classical pre-processing","html_id":"classical-pre-processing","implicit":true,"key":"OuVw3YBcDu"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"The first three layers in our pipeline are purely classical. They implement fairly basic operations commonly encountered in classical image classification pipelines: first flatten each (single-channel) input image, perform dimensionality reduction using ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"c79zsRSZBF"},{"type":"link","url":"https://en.wikipedia.org/wiki/Principal_component_analysis","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"PCA","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"aZHEQVqRyb"}],"urlSource":"wiki:Principal_component_analysis","data":{"page":"Principal_component_analysis","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"rWt5shb1u5"},{"type":"text","value":", and then embed the compressed images into an even lower-dimensional feature space using a trainable fully-connected layer. We use drop out during training and the sigmoid ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"RiTpaPx8c1"},{"type":"link","url":"https://en.wikipedia.org/wiki/Activation_function","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"activation function","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"QIdg5KHQkz"}],"urlSource":"https://en.wikipedia.org/wiki/Activation_function","data":{"page":"Activation_function","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"WHvC82C0ui"},{"type":"text","value":".","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"wmGaKGjKrD"}],"key":"zTTswt6Dfr"},{"type":"image","url":"/qml-challenge-scorer/build/classical_pre-736b27c206108455cd6aea55c0889d9d.png","width":"75%","align":"center","key":"RqkOeflCyS","urlSource":"media/classical_pre.png"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"Xs1yCfpRf4"}],"key":"qrnGeL4CSx"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"This part of the architecture is essentially ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"x3KhUWSQiz"},{"type":"strong","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"fixed","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"KbP9GiLuTx"}],"key":"ZhY2rB77IH"},{"type":"text","value":": the only thing you get to decide here is the dimension ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"BiBsUQbFNN"},{"type":"inlineMath","value":"n","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"sUfvIzjJsP"},{"type":"text","value":" of the resulting latent vectors. For instance, in ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"aCHta5EYFU"},{"type":"crossReference","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Figure¬†","key":"ncJurmFYJn"},{"type":"text","value":"1","key":"QqOSFqkzCr"}],"identifier":"fig-hybrid-nn","label":"fig-hybrid-nn","kind":"figure","template":"Figure¬†%s","enumerator":"1","resolved":true,"html_id":"fig-hybrid-nn","key":"aOklPfWh1R"},{"type":"text","value":", ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"mxmuenDPvK"},{"type":"inlineMath","value":"n = 12","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">n = 12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">12</span></span></span></span>","key":"QKelWFvfhm"},{"type":"text","value":".","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"sDz61C1GJd"}],"key":"EhvlmELBzl"}],"key":"PBKnVlZTb5"},{"type":"heading","depth":3,"position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Quantum Layer","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"DVAFQclOu9"}],"identifier":"sec-quantum-layer","label":"sec-quantum-layer","html_id":"sec-quantum-layer","key":"zMVRRkNW2X"},{"type":"paragraph","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Then comes the most interesting part: the ‚Äúquantum layer.‚Äù Our whole challenge revolves around this layer: the best design here will achieve the highest classification accuracy. And there‚Äôs a ","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"uAbheceqVy"},{"type":"strong","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"big prize","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"K4pm6J5C8t"}],"key":"iQSKc1KbfF"},{"type":"text","value":" for that. ü•á","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"FegUhWdqSi"}],"key":"FAuZeIrNq1"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"The quantum layer consists of three components:","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"sJMLP27pLt"}],"key":"PmijW3S1Iq"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":47,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"an encoding circuit used to load each ","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"jylEad142d"},{"type":"inlineMath","value":"n","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"LCzmrmh0zR"},{"type":"text","value":"-dimensional latent vector into an ","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"sq2XEnx8Nz"},{"type":"inlineMath","value":"n","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"InL9u7DZ4J"},{"type":"text","value":"-dimensional qubit state,","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"XEiROESXLQ"}],"key":"fnHmUcyQg1"},{"type":"listItem","spread":true,"position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"children":[{"type":"text","value":"a variational circuit on ","position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"key":"UJ8uHQV3W1"},{"type":"inlineMath","value":"n","position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"EUQ6Fplsa7"},{"type":"text","value":" qubits with trainable parameters used to learn how to separate encoded latent vectors in the high-dimensional multi-qubit state space, and","position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"key":"p9nW3mCpoC"}],"key":"fTvfatMrk7"},{"type":"listItem","spread":true,"position":{"start":{"line":49,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"a list of ","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"LVuf26zqUJ"},{"type":"inlineMath","value":"m","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>","key":"dXmHrZEyB4"},{"type":"text","value":" measureable quantities used to extract ‚Äúquantum features‚Äù from the transformed ","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"aKgTV7SeDS"},{"type":"inlineMath","value":"n","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"letZIBKgny"},{"type":"text","value":"-qubit states for classification. (For instance, ","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"gA85uRVM5J"},{"type":"inlineMath","value":"m = 4","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">m = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>","key":"hcbqkP6yU0"},{"type":"text","value":" in ","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"nbdvLazFzs"},{"type":"crossReference","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"Figure¬†","key":"XfAVJJXAlp"},{"type":"text","value":"1","key":"NO9ZeMBYj9"}],"identifier":"fig-hybrid-nn","label":"fig-hybrid-nn","kind":"figure","template":"Figure¬†%s","enumerator":"1","resolved":true,"html_id":"fig-hybrid-nn","key":"OUTypQ54Na"},{"type":"text","value":".)","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"Oq6O5cdGSH"}],"key":"xZyvTpS2Zt"}],"key":"s9in7nS29h"},{"type":"image","url":"/qml-challenge-scorer/build/quantum_layer-a80b9fe853ba03fc0e23a6b31fe26022.png","width":"75%","align":"center","key":"SR1rx82dO8","urlSource":"media/quantum_layer.png"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"To get the ball rolling, look to the ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"cBoy7FDLU5"},{"type":"inlineCode","value":"ionqvision.ansatze.ansatz_library","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"qKLAz4F8WA"},{"type":"text","value":" module for inpiration. We‚Äôve implemented some of the encoders and ansatze commonly encountered in the literature.","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"qYT4QtqAUG"}],"key":"wgubaAnlok"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"For instance, you could use the ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"CIRIbx3Uxz"},{"type":"inlineCode","value":"AngleEncoder","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"ybzgRE3Z3r"},{"type":"text","value":", which has the following structure, for your first model.","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"b1MTLSNpf6"}],"key":"XNigQkRlYT"}],"key":"K1nTM2AFqr"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from ionqvision.ansatze.ansatz_library import AngleEncoder\n\nencoder = AngleEncoder(num_qubits=4)\nencoder.draw(\"mpl\")","key":"C3HWMATRrF"},{"type":"output","id":"q2lW89o-xUImnZzC5WPRu","data":[{"output_type":"execute_result","execution_count":1,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"6f193422c8d03a43328e34cf4782af51","path":"/qml-challenge-scorer/build/6f193422c8d03a43328e34cf4782af51.png"},"text/plain":{"content":"<Figure size 454.719x367.889 with 1 Axes>","content_type":"text/plain"}}}],"key":"lyah6YcqJR"}],"key":"lqMjmq1xku"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In addition, you can use its implementation as a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fAGYS90YJh"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"template","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CYy8MR5wo3"}],"key":"dVNL0oS9p4"},{"type":"text","value":" for your novel encoder designs!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uo9wyka1Ej"}],"key":"SU6rj7rU64"},{"type":"include","file":"../ionqvision/ionqvision/ansatze/ansatz_library.py","literal":true,"filter":{"lines":[[19,57]]},"children":[{"type":"code","value":"class AngleEncoder(VariationalAnsatz):\n    \"\"\"\n    Implement a quantum circuit for higher-order sparse angle encoding.\n\n    INPUT:\n\n        - ``num_qubits`` -- number of qubits\n        - ``entanglement_depth`` -- (optional) number layers of entangling CNOT\n          gates: for each ``k`` in ``range(entanglement_depth)``, use gates\n          ``CNOT(j, j + k + 1)``.\n        - ``param_prefix`` -- (optional) string prefix for named circuit\n          parameters\n\n    EXAMPLES::\n\n        >>> from ionqvision.ansatze.ansatz_library import AngleEncoder\n        >>> ansatz = AngleEncoder(4, entanglement_depth=3, param_prefix=\"y\")\n        >>> ansatz.draw()\n             ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                              \n        q_0: ‚î§ Ry(œÄ*y[0]) ‚îú‚îÄ‚îÄ‚ñ†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ†‚îÄ‚îÄ\n             ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§‚îå‚îÄ‚î¥‚îÄ‚îê            ‚îÇ         ‚îÇ  \n        q_1: ‚î§ Ry(œÄ*y[1]) ‚îú‚î§ X ‚îú‚îÄ‚îÄ‚ñ†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚ñ†‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ\n             ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§‚îî‚îÄ‚îÄ‚îÄ‚îò‚îå‚îÄ‚î¥‚îÄ‚îê     ‚îå‚îÄ‚î¥‚îÄ‚îê  ‚îÇ    ‚îÇ  \n        q_2: ‚î§ Ry(œÄ*y[2]) ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ X ‚îú‚îÄ‚îÄ‚ñ†‚îÄ‚îÄ‚î§ X ‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ\n             ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§     ‚îî‚îÄ‚îÄ‚îÄ‚îò‚îå‚îÄ‚î¥‚îÄ‚îê‚îî‚îÄ‚îÄ‚îÄ‚îò‚îå‚îÄ‚î¥‚îÄ‚îê‚îå‚îÄ‚î¥‚îÄ‚îê\n        q_3: ‚î§ Ry(œÄ*y[3]) ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ X ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ X ‚îú‚î§ X ‚îú\n             ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îî‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îò\n    \"\"\"\n    def __init__(self, num_qubits, entanglement_depth=1, param_prefix=\"x\"):\n        super().__init__(num_qubits)\n\n        x = ParameterVector(param_prefix, num_qubits)\n        [self.ry(np.pi * xi, qbt) for qbt, xi in enumerate(x)]\n\n        for k in range(entanglement_depth):\n            top_qubit = 0\n            while top_qubit < num_qubits - (k + 1):\n                self.cx(top_qubit, top_qubit + k + 1)\n                top_qubit += 1","lang":"python","showLineNumbers":true,"startingLineNumber":19,"filename":"ansatz_library.py","key":"jD8mrm8Aj0"}],"key":"KtBiRQ8uCM"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Similarly, you can leverage the built-in ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"vKCGlHs5kt"},{"type":"inlineCode","value":"BrickworkLayoutAnsatz","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"lCOW3wOUXw"},{"type":"text","value":", or the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"P8nkDdksjt"},{"type":"inlineCode","value":"QCNNAnsatz","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"c2biisBMUe"},{"type":"text","value":", amongst others, for the trainable layer.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"mwFWWIwELw"}],"key":"XHLbYrAmev"}],"key":"E92tAx4uxa"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from ionqvision.ansatze.ansatz_library import QCNNAnsatz\n\nansatz = QCNNAnsatz(num_qubits=4)\nansatz.draw(\"mpl\")","key":"DgymF4M8uQ"},{"type":"output","id":"KE9OdCgafpnO5NihC1HAz","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"2b2c08850ab12a480f4662f2618dec5a","path":"/qml-challenge-scorer/build/2b2c08850ab12a480f4662f2618dec5a.png"},"text/plain":{"content":"<Figure size 1207.22x367.889 with 1 Axes>","content_type":"text/plain"}}}],"key":"h0wfn2m41h"}],"key":"oujY8NpePT"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This ansatz is particularly interesting as it consists of a sequence of ‚Äúconvolution‚Äù filters interspersed with pooling operations that reduce the number of ‚Äúactive‚Äù qubits upon each layer. Note that our implemenation modifies the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kp1SsTkFMc"},{"type":"link","url":"https://www.nature.com/articles/s41567-019-0648-8","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"original design","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"szaeYW4RMz"}],"urlSource":"https://www.nature.com/articles/s41567-019-0648-8","key":"dMDn9chE4F"},{"type":"text","value":" by replacing the mid-circuit measurements with controlled rotations.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Xhxi9OPmq2"}],"key":"Qh4BFfeFtH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If you‚Äôd like to try out this ansatz, be sure to ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"J3aPsrn3yt"},{"type":"link","url":"https://pybit.es/articles/python-subclasses/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"subclass","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"q5a6l5AwHr"}],"urlSource":"https://pybit.es/articles/python-subclasses/","key":"tMnPtxA8jo"},{"type":"text","value":" and implement your own ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GwcVo9IKem"},{"type":"inlineCode","value":"QCNNAnsatz.ConvolutionBrickwork","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Bs47NSCKRf"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"m16FAcITYa"},{"type":"inlineCode","value":"QCNN.PoolingLayer","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IC1Jgb5aNH"},{"type":"text","value":" modules!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gUWpsV1cod"}],"key":"lK2XwCCSdQ"},{"type":"include","file":"../ionqvision/ionqvision/ansatze/ansatz_library.py","literal":true,"filter":{"lines":[[271,330]]},"children":[{"type":"code","value":"class QCNNAnsatz(VariationalAnsatz):\n    r\"\"\"\n    Implement the Quantum Convolutional Network Ansatz (QCNN) as described in\n    :cite:t:`2019:qcnn`.\n\n    The quasi-local unitary $U_i$'s are entangling two-qubit gates with $6$\n    variational parameters.\n    They are laid out in a brickwork pattern with ``filter_depth`` layers.\n\n    The pooling operations are implemented by two-qubit controlled rotations,\n    with $2$ variational parameters.\n\n    The circuit starts with ``num_qubits`` active qubits and then half the\n    remaining qubits are discarded after each pooling operation until only a\n    single active qubit remains. This final qubit is measured and the result is\n    used for binary classification.\n    \"\"\"\n    class ConvolutionBrickwork(BrickworkLayoutAnsatz):\n        \"\"\"\n        Implement the convolution filters for the :class:`.QCNNAnsatz`.\n        \"\"\"\n        def __init__(self, num_qubits, num_layers, prefix=None, qubits=None, initial_state=None):\n            super().__init__(num_qubits, num_layers, blk_sz=3, prefix=prefix, qubits=qubits, initial_state=initial_state)\n        \n        def two_qubit_block(self, theta, q1, q2):\n            conv_op = QuantumCircuit(2, name=\"CONV\")\n            conv_op.ry(theta[0], 0)\n            conv_op.ry(theta[1], 1)\n            conv_op.rxx(theta[2], 0, 1)\n            self.append(conv_op.to_instruction(), [q1, q2])\n\n    class PoolingLayer(BrickworkLayoutAnsatz):\n        \"\"\"\n        Implement the pooling layer for the :class:`.QCNNAnsatz`.\n        \"\"\"\n        def __init__(self, num_qubits, prefix=None, qubits=None):\n            super().__init__(num_qubits, 1, blk_sz=1, prefix=prefix, qubits=qubits)\n    \n        def two_qubit_block(self, theta, q1, q2):\n            pool_op = QuantumCircuit(2, name=\"POOL\")\n            pool_op.crz(theta[0], 1, 0)\n            self.append(pool_op.to_instruction(), [q1, q2])\n\n    def __init__(self, num_qubits, filter_depth=2, initial_state=None):\n        num_layers = int(log(num_qubits, 2))\n        if abs(log(num_qubits, 2) - num_layers) > 1e-6:\n            raise ValueError(\"num_qubits must be a power of 2\")\n\n        super().__init__(num_qubits)\n        if initial_state is not None:\n            self.compose(initial_state, inplace=True)\n\n        for k in range(num_layers):\n            qubits = list(range(0, num_qubits, 2**k))\n        \n            conv = QCNNAnsatz.ConvolutionBrickwork(num_qubits, filter_depth, prefix=\"C\" + str(k), qubits=qubits)\n            self.compose(conv, inplace=True)\n            \n            pool = QCNNAnsatz.PoolingLayer(num_qubits, prefix=\"P\" + str(k), qubits=qubits)\n            self.compose(pool, inplace=True)","lang":"python","showLineNumbers":true,"startingLineNumber":271,"filename":"ansatz_library.py","key":"CNFrSO0OcY"}],"key":"p34MvoGx70"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"While ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Oox8jIIHtB"},{"type":"inlineCode","value":"ionqvision","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"r0XvUm9v0n"},{"type":"text","value":" does not provide built-in qubit observables, you can set these up using ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"ZRTzC0dtTD"},{"type":"inlineCode","value":"qiskit","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NTUbbso8JI"},{"type":"text","value":" as follows.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"bXLHYW158Y"}],"key":"VjhSVyZzGZ"}],"key":"x9l8KoQNhR"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from qiskit.quantum_info import SparsePauliOp\n\n# Measure the expectation value of X_0, Y_0, Z_0\nquantum_features = [\n    SparsePauliOp([\"IIIX\"]), \n    SparsePauliOp([\"IIIY\"]), \n    SparsePauliOp([\"IIIZ\"])\n]","key":"cSiIbOXsBs"},{"type":"output","id":"fpYbtTlNXXvbuXIQGwsEY","data":[],"key":"lB7bhamzUf"}],"key":"svLfWywR1a"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"It‚Äôs important to keep in mind that the encoder, the ansatz, and the quantum feature vector are highly interrelated: the way you embed latent vectors into (multi-)qubit state space should dictate how you choose to transform the encoded state vectors, which should in turn inform what features you decide to measure.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ctpyLy9asn"}],"key":"XcTiFH9DbD"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The best model will likely exploit synergies resulting from intentional co-design of the three components.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lfv3Fm4MlA"}],"key":"elD9ePC9YR"},{"type":"admonition","kind":"important","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","key":"fKfAbtyUBp"}],"key":"xo9NhaXZn3"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This is where you should let your imagination run free! Get creative, and show us what you‚Äôve got. Feel free to leverage the power of the internet and use every resource at your disposal.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"C0wQ8HkTYz"}],"key":"X7gqOSBhIr"}],"key":"dd3lL71A1L"},{"type":"heading","depth":3,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Classical post-processing","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"lPvhxbbAFA"}],"identifier":"classical-post-processing","label":"Classical post-processing","html_id":"classical-post-processing","implicit":true,"key":"pCFiohVINJ"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"After the quantum layer, feature vectors in the classification pipeline return to the classical device for some post-processing. In particular, we train a fully-connected layer with a scalar output to minimize the binary ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"JPtZwHCa9S"},{"type":"link","url":"https://en.wikipedia.org/wiki/Cross-entropy","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"cross-entropy","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"xYRIMbHzeH"}],"urlSource":"wiki:Cross-entropy","data":{"page":"Cross-entropy","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"wDY3hgcSSN"},{"type":"text","value":" between the final value and the input image‚Äôs true label. Again, we use drop out during training and the sigmoid ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"utWZJVB5U0"},{"type":"link","url":"https://en.wikipedia.org/wiki/Activation_function","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"activation function","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"NlJf043i3Y"}],"urlSource":"https://en.wikipedia.org/wiki/Activation_function","data":{"page":"Activation_function","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"oPPRDzAMpZ"},{"type":"text","value":".","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"QExWi8eX8Q"}],"key":"XyHuwVaWAm"},{"type":"image","url":"/qml-challenge-scorer/build/classical_post-c949c9bd1fd18dfc108ac118411ce5ef.png","width":"45%","align":"center","key":"Qy0d3Fvyrr","urlSource":"media/classical_post.png"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"This final stage is intentionally light, to ensure the quantum layer is the star of the show.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"kk9LtbVjnH"}],"key":"Xko2aqCXtn"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"b1DHjX5ijs"}],"key":"MF75fAFBib"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"This part of the architecture is totally ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"XRdDqbfdCe"},{"type":"strong","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"fixed","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"AL9X1cCLa1"}],"key":"u3MZi8nAWM"},{"type":"text","value":": the input dimension (","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"Ntb0raSeoZ"},{"type":"inlineMath","value":"m","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>","key":"f5paTM5eC7"},{"type":"text","value":") is determined by the quantum feature vector, and the output is always a scalar.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"cgz9oTa1ka"}],"key":"XHwQ2oACp0"}],"key":"kfaEnWmLkU"},{"type":"heading","depth":2,"position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Training your model","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"qGBybamFR0"}],"identifier":"sec-training","label":"sec-training","html_id":"sec-training","key":"DJNRNrJARb"},{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Once you‚Äôve settled on your quantum layer, you can sit back, relax, and let ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"fQwtTNu89E"},{"type":"inlineCode","value":"ionqvision","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"ZmT3BGm011"},{"type":"text","value":" do the heavy lifting. First, set up your classifier and verify it‚Äôs working as expected.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"rurFPCLIYd"}],"key":"k2jzoo6M4J"}],"key":"J4fCKTHQCN"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from ionqvision.modules import BinaryMNISTClassifier\n\n# Set up your classifier and inspect its architecture\nclassifier = BinaryMNISTClassifier(encoder, ansatz, quantum_features); classifier","key":"aIhRpLwuCT"},{"type":"output","id":"rh2Q3ZADxb-8LIpM0le5z","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"BinaryMNISTClassifier(\n  (latent_vec_encoder): Sequential(\n    (0): Linear(in_features=168, out_features=4, bias=True)\n    (1): Dropout(p=0.5, inplace=False)\n    (2): Sigmoid()\n  )\n  (quantum_layer): QuantumModule()\n  (prediction_head): Sequential(\n    (0): Linear(in_features=3, out_features=1, bias=True)\n    (1): Dropout(p=0.5, inplace=False)\n    (2): Sigmoid()\n  )\n)","content_type":"text/plain"}}}],"key":"uAaqloRMGL"}],"key":"UnKYcD78yt"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In case you‚Äôre wondering, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p9svUq74WP"},{"type":"inlineCode","value":"BinaryMNISTClassifier","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dvBweM8s1l"},{"type":"text","value":" is a standard ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lq6sME68P9"},{"type":"inlineCode","value":"torch.nn.Module","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m4E7oorpy5"},{"type":"text","value":"; at this point, all the parameters in your quantum layer have been registered with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zNSZcR1DSE"},{"type":"inlineCode","value":"torch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IcuvIYuyC6"},{"type":"text","value":" and the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WGjJNRJ7Xu"},{"type":"inlineCode","value":"autograd","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a64ZRZWJGv"},{"type":"text","value":" will automatically compute the relevant gradients during the backward pass. Nothing else to worry about!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DRnxbs7aoL"}],"key":"WQPRWWk9Rj"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Be sure to checkout the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RTc8OixWJN"},{"type":"link","url":"https://willieab.github.io/qml-challenge-scorer/ionqvision-docs/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"IonQ Vision Docs","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Wn5CinUQWq"}],"urlSource":"https://willieab.github.io/qml-challenge-scorer/ionqvision-docs/","key":"jgXq8AUZqu"},{"type":"text","value":" to learn more about the inner workings of the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WxWnSWWJ8S"},{"type":"inlineCode","value":"BinaryMNISTClassifier","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HyO7NIovdk"},{"type":"text","value":" and all the related classes. The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LaQyCeq9bB"},{"type":"keyboard","children":[{"type":"text","value":"IonQ Vision Docs","key":"N8la31Bot3"}],"key":"oTSDDbtj6o"},{"type":"text","value":" button at the top-right corner of the page links directly to the API refrence.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pp09eKUTOa"}],"key":"TfKRXkTdDO"}],"key":"cJIinCDOdp"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Check out your quantum layer\nclassifier.quantum_layer.layer_qc.draw(\"mpl\")","key":"Wfdw54Qdy4"},{"type":"output","id":"jkbKNFlC29Ytki9Sy1hmj","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"9050e03b17729dfdcbd08980b67ab512","path":"/qml-challenge-scorer/build/9050e03b17729dfdcbd08980b67ab512.png"},"text/plain":{"content":"<Figure size 1625.27x367.889 with 1 Axes>","content_type":"text/plain"}}}],"key":"yoWc4qA3Qs"}],"key":"ynU2tx7LYs"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Verify the images loaded correctly\nclassifier.visualize_batch()","key":"uI88SPixgo"},{"type":"output","id":"GuBUcRLetESy2kMJuZOtL","data":[{"name":"stderr","output_type":"stream","text":"Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [0.28789353..1.9107434].\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4141f44566f3144c593db2cf7f36e0c7","path":"/qml-challenge-scorer/build/4141f44566f3144c593db2cf7f36e0c7.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"OAI7T47ICy"}],"key":"DtrglsFHwz"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now train your model. Use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dQlrTaXhLI"},{"type":"inlineCode","value":"config","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JMTkKPOFul"},{"type":"text","value":" dictionary to control lower-level aspects of the training, like the number of ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EWfpKgFTG6"},{"type":"inlineCode","value":"epochs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xLmQj7dbDt"},{"type":"text","value":", the learning rate, the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hfPjgTLuZn"},{"type":"inlineCode","value":"betas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AIwFZqdVYL"},{"type":"text","value":" used by ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ce03Q3lcpg"},{"type":"link","url":"https://pytorch.org/docs/stable/generated/torch.optim.Adam.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Adam","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gaBdkCMcKg"}],"urlSource":"https://pytorch.org/docs/stable/generated/torch.optim.Adam.html","key":"AQsSLGPROV"},{"type":"text","value":", etc.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NOECIP1LNW"}],"key":"HyVdTitf1Z"}],"key":"Pssy6PhQlK"},{"type":"block","kind":"notebook-code","data":{"editable":true,"slideshow":{"slide_type":""},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Get a (pre-processed) training and test set\ntrain_set, test_set = classifier.get_train_test_set(train_size=300, test_size=100)\n\n# Configure model training hyper parameters\nconfig = {\n    \"epochs\": 4,\n    \"lr\": 0.1,\n    \"batch_size\": 50,\n    \"betas\": (0.9, 0.99),\n    \"weight_decay\": 1e-3,\n    \"clip_grad\": True,\n    \"log_interval\": 6,\n}\n\n# Train and plot the results\nclassifier.train_module(train_set, test_set, config)\nclassifier.plot_training_progress()","visibility":"show","key":"p5Z5HhTIkW"},{"type":"output","id":"Vw23zD9NaqtFLyFXhreK8","data":[{"name":"stdout","output_type":"stream","text":"epoch:   1 | loss: 0.714\nlr: 0.1000 | processed     6/    6 batches per epoch in 140.31s (0.76s forward / 21.37s backward)\nModel achieved 54.667%  accuracy on TRAIN set.\nModel achieved 53.000%  accuracy on TEST set.\n\nepoch:   2 | loss: 0.698\nlr: 0.1000 | processed     6/    6 batches per epoch in 140.33s (0.78s forward / 21.67s backward)\nModel achieved 45.333%  accuracy on TRAIN set.\nModel achieved 47.000%  accuracy on TEST set.\n\nepoch:   3 | loss: 0.690\nlr: 0.1000 | processed     6/    6 batches per epoch in 140.98s (0.80s forward / 22.25s backward)\nModel achieved 65.000%  accuracy on TRAIN set.\nModel achieved 57.000%  accuracy on TEST set.\n\nepoch:   4 | loss: 0.695\nlr: 0.1000 | processed     6/    6 batches per epoch in 139.55s (0.74s forward / 21.01s backward)\nModel achieved 66.000%  accuracy on TRAIN set.\nModel achieved 61.000%  accuracy on TEST set.\n\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"f959aaa4c3821ca0035df9a894da1bdd","path":"/qml-challenge-scorer/build/f959aaa4c3821ca0035df9a894da1bdd.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"y2IG7STudM"}],"visibility":"show","key":"j8wbr8hOjU"},{"type":"block","kind":"notebook-content","data":{"editable":true,"slideshow":{"slide_type":""},"tags":[],"user_expressions":[{"expression":"f\"{100*classifier.train_acc[-1]:.02f}%\"","result":{"data":{"text/plain":"'66.00%'"},"metadata":{},"status":"ok"}},{"expression":"f\"{100*classifier.test_acc[-1]:.02f}%\"","result":{"data":{"text/plain":"'61.00%'"},"metadata":{},"status":"ok"}}]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The model achieved ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XJtmK5G90x"},{"type":"inlineExpression","value":"f\"{100*classifier.train_acc[-1]:.02f}%\"","result":{"data":{"text/plain":"'66.00%'"},"metadata":{},"status":"ok"},"identifier":"eval-1","children":[{"type":"text","value":"'66.00%'","key":"uLNGJ49x5F"}],"key":"K9ownQFUex"},{"type":"text","value":" on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MhtQUsBEX7"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"training","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nfTyej8I8m"}],"key":"GzZ2ysBeuD"},{"type":"text","value":" set and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ppJP9487qg"},{"type":"inlineExpression","value":"f\"{100*classifier.test_acc[-1]:.02f}%\"","result":{"data":{"text/plain":"'61.00%'"},"metadata":{},"status":"ok"},"identifier":"eval-2","children":[{"type":"text","value":"'61.00%'","key":"siYp3HcFb4"}],"key":"K8KvH0nXS7"},{"type":"text","value":" on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DqEYhHpt6e"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"test","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bWdfU5OqTa"}],"key":"M6qlBTGXaJ"},{"type":"text","value":" set.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YdGLh3MOPY"}],"key":"BQWvZO5EGC"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Submitting your model for grading","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Bmzmqn679n"}],"identifier":"submitting-your-model-for-grading","label":"Submitting your model for grading","html_id":"submitting-your-model-for-grading","implicit":true,"key":"fov6Y0ZvEs"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Now comes the final thrill. Use your ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"spVpRyKrCw"},{"type":"inlineCode","value":"classifier","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jKwWEfxOuT"},{"type":"text","value":"‚Äôs ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OXG1oj5Hya"},{"type":"inlineCode","value":"submit_model_for_grading","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ge2a5H8oVL"},{"type":"text","value":" method to, well, submit your model for grading!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cXviaU9QrE"}],"key":"nhTYlZsKjF"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Your quantum layer and your model‚Äôs trained weights will be serialized and then reconstructed in a sanitized environment. We‚Äôll run inference using the reconstructed model on an unseen validation set to compute your accuracy score.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jqri5HELvM"}],"key":"ZM75UmSVyw"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Be sure to check our live leader board after a few minutes to see where your team stands!","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"RozWDlgpCj"}],"key":"ZprkXBHNtu"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"AkpjMAjEAs"}],"key":"wN7VHiXlfj"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Make sure you‚Äôve created your team branch, e.g., using ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"RXpA6vnbpW"},{"type":"inlineCode","value":"git checkout -b my-team-name","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"QoWwMYuV5e"},{"type":"text","value":" before running the following command.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ow6ReA90Cn"}],"key":"sq0a7CvGy7"},{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"See Also","key":"rjtHaSRszz"}],"key":"vsTDRDaDyH"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Check out our ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"rHyOWqu1RO"},{"type":"link","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"setup instructions","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"fzs0weVlMx"}],"identifier":"ch-env-setup","label":"ch-env-setup","url":"/env-setup","internal":true,"dataUrl":"/env-setup.json","key":"peEucEj9ma"},{"type":"text","value":" and our ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Y2nzc7C1yH"},{"type":"link","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"tips and tricks section","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"CY8EOiePMn"}],"identifier":"ch-tips-tricks","label":"ch-tips-tricks","url":"/details","internal":true,"dataUrl":"/details.json","key":"TFEnXF2Kbu"},{"type":"text","value":" for more ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"bQ31M9ubiR"},{"type":"crossReference","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"details","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"jJ3P6khnFf"}],"identifier":"block-team-branch","label":"block-team-branch","kind":"admonition:danger","template":"{name}","resolved":true,"html_id":"block-team-branch","remote":true,"url":"/details","dataUrl":"/details.json","key":"eaEjQxqkNz"},{"type":"text","value":".","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"laPUGElyiq"}],"key":"XSGYeeYTQ2"}],"key":"UikUhHXrge"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"In addition, the following command assumes your current directory is the ","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"FZ6Lqir7Pj"},{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"root","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"LQQcRznIva"}],"key":"FKR4H1DgpP"},{"type":"text","value":" of the cloned challenge repo (","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"L3O2g8yEVQ"},{"type":"inlineCode","value":"ionq-skku-vision-challenge","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"k53XH06CIo"},{"type":"text","value":"). Check out the ","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"rFyjqPnzQE"},{"type":"link","url":"https://willieab.github.io/qml-challenge-scorer/ionqvision-docs/modules.html#ionqvision.modules.binary_classifier.BinaryMNISTClassifier.save_model","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"documentation","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"GYLI166JpP"}],"urlSource":"https://willieab.github.io/qml-challenge-scorer/ionqvision-docs/modules.html#ionqvision.modules.binary_classifier.BinaryMNISTClassifier.save_model","key":"pf5C1vxElu"},{"type":"text","value":" of the optional ","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"thOWiLgZYj"},{"type":"inlineCode","value":"path_to_repo","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"qQ8sr66AKH"},{"type":"text","value":" parameter to work in a different directory.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"KnBhtiBMBg"}],"key":"uyrXCRxNl0"}],"key":"seyvNXk6et"}],"visibility":"show","key":"T6REEy0fHy"},{"type":"block","kind":"notebook-code","data":{"editable":true,"slideshow":{"slide_type":""},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"classifier.submit_model_for_grading()","visibility":"show","key":"efKSxgKHV7"},{"type":"output","id":"bSwtFmXNDP6bcbQ9-hHv2","data":[{"name":"stdout","output_type":"stream","text":"Success! Submitted trained_models/model_e5e7ca05465cd7b5661959c722b92a7ac291834d.zip for grading!\n"}],"visibility":"show","key":"rVcPz3XUed"}],"visibility":"show","key":"rjEAKX4R5g"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"wQDhV64QRu"}],"key":"g1Nn5XxQQq"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"PMu9HTwcYq"},{"type":"inlineCode","value":"submit_model_for_grading","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cJUIcFCGp1"},{"type":"text","value":" method prepares an archive containing your trained model‚Äôs weights, and everything that‚Äôs needed to rebuild your quantum layer. The archive is stored in the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"lqWt2M9K6j"},{"type":"inlineCode","value":"trained_models","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"G5NkGiMock"},{"type":"text","value":" directory in your copy of our repository.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"QFpVGsc7dV"}],"key":"SAX6jLCuKg"},{"type":"admonition","kind":"caution","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Caution","key":"iBi6oMWI1Y"}],"key":"cf3Sdtkv2k"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Don‚Äôt change the archive‚Äôs name or its contents.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"E1rMTSTSNS"}],"key":"r3zVT5OHjm"}],"key":"QK644GBtNK"}],"key":"yL7XGa7Pvz"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Good luck now! We hope you enjoy this exciting challenge.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"JljhN0QHrw"}],"key":"agMpdBvEqg"}],"key":"qjPwUlLTGh"}],"key":"sxzMStJ0qB"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Zero or one?","url":"/","group":"Zero or one?"},"next":{"title":"Tips, tricks, and potential gotchas","url":"/details","group":"Zero or one?"}}},"domain":"http://localhost:3000"}